name: Build OCI Image

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: none

jobs:
  build:
    name: Build ${{ matrix.variant.name }} image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        variant:
          - name: Alpine
            tag: alpine
            dockerfile: Dockerfile.alpine
          - name: Ubuntu
            tag: ubuntu
            dockerfile: Dockerfile
    steps:
      - name: Check out code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Login to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
        if: ${{ github.event_name != 'pull_request' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up Docker Metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=auto
            prefix=${{ matrix.variant.tag }}-,onlatest=true
          tags: |
            type=edge
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha,scope=${{ matrix.variant.tag }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant.tag }}
          context: .
          file: ${{ matrix.variant.dockerfile }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  devcontainer:
    name: Build devcontainer image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Install @devcontainers/cli
        run: npm install -g @devcontainers/cli

      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124 # v3.1.0        

      - name: Build image
        run: devcontainer build --workspace-folder . --cache-from type=gha --cache-to type=gha,mode=max

      - name: Start image
        run: devcontainer up --workspace-folder . --id-label codespace=tfhttp

      - name: Build
        run: |
          devcontainer exec --workspace-folder . --id-label codespace=tfhttp -- sh -c '
            cd /workspaces/tfhttp && \
            cmake -B /tmp/build -DCMAKE_BUILD_TYPE=Release -DBUILD_MOSTLY_STATIC_BINARY=off && \
            cmake --build /tmp/build'

      - name: Clean up
        if: always()
        run: |
          ID=$(docker ps -q --filter label=codespace=tfhttp)
          if [ -n "${ID}" ]; then
            docker container stop "${ID}"
            docker container rm "${ID}"
          fi
